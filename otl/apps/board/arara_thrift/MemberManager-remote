#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import MemberManager
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  AuthenticationInfo authenticate(string username, string password, string user_ip)'
  print '  void register(UserRegistration user_reg)'
  print '  void backdoor_confirm(string session_key, string username)'
  print '  void confirm(string username_to_confirm, string activation_code)'
  print '  bool is_registered(string username)'
  print '  bool is_registered_nickname(string nickname)'
  print '  bool is_registered_email(string email)'
  print '  UserInformation get_info(string session_key)'
  print '  void modify_password(string session_key, UserPasswordInfo user_password_info)'
  print '  void modify(string session_key, UserModification user_modification_info)'
  print '  void modify_authentication_email(string username, string new_email)'
  print '  PublicUserInformation query_by_username(string session_key, string username)'
  print '  PublicUserInformation query_by_nick(string session_key, string username)'
  print '  void remove_user(string session_key)'
  print '   search_user(string session_key, string search_user, string search_key)'
  print '  bool is_sysop(string session_key)'
  print '  void _logout_process(string username)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MemberManager.Client(protocol)
transport.open()

if cmd == 'authenticate':
  if len(args) != 3:
    print 'authenticate requires 3 args'
    sys.exit(1)
  pp.pprint(client.authenticate(args[0],args[1],args[2],))

elif cmd == 'register':
  if len(args) != 1:
    print 'register requires 1 args'
    sys.exit(1)
  pp.pprint(client.register(eval(args[0]),))

elif cmd == 'backdoor_confirm':
  if len(args) != 2:
    print 'backdoor_confirm requires 2 args'
    sys.exit(1)
  pp.pprint(client.backdoor_confirm(args[0],args[1],))

elif cmd == 'confirm':
  if len(args) != 2:
    print 'confirm requires 2 args'
    sys.exit(1)
  pp.pprint(client.confirm(args[0],args[1],))

elif cmd == 'is_registered':
  if len(args) != 1:
    print 'is_registered requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_registered(args[0],))

elif cmd == 'is_registered_nickname':
  if len(args) != 1:
    print 'is_registered_nickname requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_registered_nickname(args[0],))

elif cmd == 'is_registered_email':
  if len(args) != 1:
    print 'is_registered_email requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_registered_email(args[0],))

elif cmd == 'get_info':
  if len(args) != 1:
    print 'get_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_info(args[0],))

elif cmd == 'modify_password':
  if len(args) != 2:
    print 'modify_password requires 2 args'
    sys.exit(1)
  pp.pprint(client.modify_password(args[0],eval(args[1]),))

elif cmd == 'modify':
  if len(args) != 2:
    print 'modify requires 2 args'
    sys.exit(1)
  pp.pprint(client.modify(args[0],eval(args[1]),))

elif cmd == 'modify_authentication_email':
  if len(args) != 2:
    print 'modify_authentication_email requires 2 args'
    sys.exit(1)
  pp.pprint(client.modify_authentication_email(args[0],args[1],))

elif cmd == 'query_by_username':
  if len(args) != 2:
    print 'query_by_username requires 2 args'
    sys.exit(1)
  pp.pprint(client.query_by_username(args[0],args[1],))

elif cmd == 'query_by_nick':
  if len(args) != 2:
    print 'query_by_nick requires 2 args'
    sys.exit(1)
  pp.pprint(client.query_by_nick(args[0],args[1],))

elif cmd == 'remove_user':
  if len(args) != 1:
    print 'remove_user requires 1 args'
    sys.exit(1)
  pp.pprint(client.remove_user(args[0],))

elif cmd == 'search_user':
  if len(args) != 3:
    print 'search_user requires 3 args'
    sys.exit(1)
  pp.pprint(client.search_user(args[0],args[1],args[2],))

elif cmd == 'is_sysop':
  if len(args) != 1:
    print 'is_sysop requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_sysop(args[0],))

elif cmd == '_logout_process':
  if len(args) != 1:
    print '_logout_process requires 1 args'
    sys.exit(1)
  pp.pprint(client._logout_process(args[0],))

transport.close()
