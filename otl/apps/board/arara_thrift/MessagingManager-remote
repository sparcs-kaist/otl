#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import MessagingManager
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  MessageList sent_list(string session_key, i32 page, i32 page_length)'
  print '  MessageList receive_list(string session_key, i32 page, i32 page_length)'
  print '  void send_message_by_username(string session_key, string to_username, string msg)'
  print '  void send_message_by_nickname(string session_key, string to_nickname, string message)'
  print '  void send_message(string session_key, string to_data, string msg)'
  print '  Message read_received_message(string session_key, i32 msg_no)'
  print '  Message read_sent_message(string session_key, i32 msg_no)'
  print '  void delete_received_message(string session_key, i32 msg_no)'
  print '  void delete_sent_message(string session_key, i32 msg_no)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MessagingManager.Client(protocol)
transport.open()

if cmd == 'sent_list':
  if len(args) != 3:
    print 'sent_list requires 3 args'
    sys.exit(1)
  pp.pprint(client.sent_list(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'receive_list':
  if len(args) != 3:
    print 'receive_list requires 3 args'
    sys.exit(1)
  pp.pprint(client.receive_list(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'send_message_by_username':
  if len(args) != 3:
    print 'send_message_by_username requires 3 args'
    sys.exit(1)
  pp.pprint(client.send_message_by_username(args[0],args[1],args[2],))

elif cmd == 'send_message_by_nickname':
  if len(args) != 3:
    print 'send_message_by_nickname requires 3 args'
    sys.exit(1)
  pp.pprint(client.send_message_by_nickname(args[0],args[1],args[2],))

elif cmd == 'send_message':
  if len(args) != 3:
    print 'send_message requires 3 args'
    sys.exit(1)
  pp.pprint(client.send_message(args[0],args[1],args[2],))

elif cmd == 'read_received_message':
  if len(args) != 2:
    print 'read_received_message requires 2 args'
    sys.exit(1)
  pp.pprint(client.read_received_message(args[0],eval(args[1]),))

elif cmd == 'read_sent_message':
  if len(args) != 2:
    print 'read_sent_message requires 2 args'
    sys.exit(1)
  pp.pprint(client.read_sent_message(args[0],eval(args[1]),))

elif cmd == 'delete_received_message':
  if len(args) != 2:
    print 'delete_received_message requires 2 args'
    sys.exit(1)
  pp.pprint(client.delete_received_message(args[0],eval(args[1]),))

elif cmd == 'delete_sent_message':
  if len(args) != 2:
    print 'delete_sent_message requires 2 args'
    sys.exit(1)
  pp.pprint(client.delete_sent_message(args[0],eval(args[1]),))

transport.close()
