#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ArticleManager
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   get_today_best_list(i32 count)'
  print '   get_today_best_list_specific(string board_name, i32 count)'
  print '   get_weekly_best_list(i32 count)'
  print '   get_weekly_best_list_specific(string board_name, i32 count)'
  print '  ArticleList not_read_article_list(string session_key, i32 page, i32 page_length)'
  print '  ArticleList not_article_list(string session_key, i32 page, i32 page_length)'
  print '  ArticleList new_article_list(string session_key, i32 page, i32 page_length)'
  print '  ArticleList article_list(string session_key, string board_name, i32 page, i32 page_length)'
  print '   read(string session_key, string board_name, id_t no)'
  print '  ArticleList article_list_below(string session_key, string board_name, id_t no, i32 page_length)'
  print '  void vote_article(string session_key, string board_name, id_t article_no)'
  print '  i32 write_article(string session_key, string board_name, WrittenArticle article)'
  print '  i32 write_reply(string session_key, string board_name, id_t article_no, WrittenArticle article)'
  print '  i32 modify(string session_key, string board_name, id_t no, WrittenArticle article)'
  print '  void delete_(string session_key, string board_name, id_t no)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ArticleManager.Client(protocol)
transport.open()

if cmd == 'get_today_best_list':
  if len(args) != 1:
    print 'get_today_best_list requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_today_best_list(eval(args[0]),))

elif cmd == 'get_today_best_list_specific':
  if len(args) != 2:
    print 'get_today_best_list_specific requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_today_best_list_specific(args[0],eval(args[1]),))

elif cmd == 'get_weekly_best_list':
  if len(args) != 1:
    print 'get_weekly_best_list requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_weekly_best_list(eval(args[0]),))

elif cmd == 'get_weekly_best_list_specific':
  if len(args) != 2:
    print 'get_weekly_best_list_specific requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_weekly_best_list_specific(args[0],eval(args[1]),))

elif cmd == 'not_read_article_list':
  if len(args) != 3:
    print 'not_read_article_list requires 3 args'
    sys.exit(1)
  pp.pprint(client.not_read_article_list(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'not_article_list':
  if len(args) != 3:
    print 'not_article_list requires 3 args'
    sys.exit(1)
  pp.pprint(client.not_article_list(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'new_article_list':
  if len(args) != 3:
    print 'new_article_list requires 3 args'
    sys.exit(1)
  pp.pprint(client.new_article_list(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'article_list':
  if len(args) != 4:
    print 'article_list requires 4 args'
    sys.exit(1)
  pp.pprint(client.article_list(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'read':
  if len(args) != 3:
    print 'read requires 3 args'
    sys.exit(1)
  pp.pprint(client.read(args[0],args[1],eval(args[2]),))

elif cmd == 'article_list_below':
  if len(args) != 4:
    print 'article_list_below requires 4 args'
    sys.exit(1)
  pp.pprint(client.article_list_below(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'vote_article':
  if len(args) != 3:
    print 'vote_article requires 3 args'
    sys.exit(1)
  pp.pprint(client.vote_article(args[0],args[1],eval(args[2]),))

elif cmd == 'write_article':
  if len(args) != 3:
    print 'write_article requires 3 args'
    sys.exit(1)
  pp.pprint(client.write_article(args[0],args[1],eval(args[2]),))

elif cmd == 'write_reply':
  if len(args) != 4:
    print 'write_reply requires 4 args'
    sys.exit(1)
  pp.pprint(client.write_reply(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'modify':
  if len(args) != 4:
    print 'modify requires 4 args'
    sys.exit(1)
  pp.pprint(client.modify(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'delete_':
  if len(args) != 3:
    print 'delete_ requires 3 args'
    sys.exit(1)
  pp.pprint(client.delete_(args[0],args[1],eval(args[2]),))

transport.close()
